

module AbsRose where

-- Haskell module generated by the BNF converter




newtype VIdent = VIdent String deriving (Eq, Ord, Show, Read)
newtype TIdent = TIdent String deriving (Eq, Ord, Show, Read)
data Exp
    = EAnd Exp Exp
    | EOr Exp Exp
    | ELt Exp Exp
    | ELte Exp Exp
    | EGt Exp Exp
    | EGte Exp Exp
    | EEq Exp Exp
    | ENe Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EApp Exp Exp
    | EType TIdent
    | EVType VIdent
    | EList [Exp]
    | EInt Integer
    | ECond Exp Exp Exp
    | ELetin [Decl] Exp
    | ELambda Type VIdent Exp
    | ECase Exp [PatternEntry]
    -- Integer in this case means number of arguments.
    -- This expression is generated only by interpreter.
    | EAlgType TIdent Integer
  deriving (Eq, Ord, Show, Read)

data PatternEntry = PEntry Pattern Exp
  deriving (Eq, Ord, Show, Read)

data Pattern
    = PListPattern Pattern Pattern
    | PVPattern VIdent
    | PInt Integer
    | PAlgPattern TIdent [Pattern]
    | PList [Pattern]
    | PAnyPattern
  deriving (Eq, Ord, Show, Read)

data Type
    = TCombined Type Type
    | TList Type
    | TAlg TIdent [Type]
    | TVar VIdent
  deriving (Eq, Ord, Show, Read)

data Decl
    = DPattern Pattern Exp
    | DFun Type VIdent [VIdent] Exp
    | DType TIdent [Type] [Type]
  deriving (Eq, Ord, Show, Read)

data Program = Prog [Decl]
  deriving (Eq, Ord, Show, Read)

