-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParRose where
import AbsRose
import LexRose
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '&&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  '*' { PT _ (TS _ 5) }
  '+' { PT _ (TS _ 6) }
  ',' { PT _ (TS _ 7) }
  '-' { PT _ (TS _ 8) }
  '->' { PT _ (TS _ 9) }
  '/' { PT _ (TS _ 10) }
  ':' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '<|' { PT _ (TS _ 15) }
  '=' { PT _ (TS _ 16) }
  '==' { PT _ (TS _ 17) }
  '=>' { PT _ (TS _ 18) }
  '>' { PT _ (TS _ 19) }
  '>=' { PT _ (TS _ 20) }
  '[' { PT _ (TS _ 21) }
  '\\' { PT _ (TS _ 22) }
  ']' { PT _ (TS _ 23) }
  '_' { PT _ (TS _ 24) }
  'case' { PT _ (TS _ 25) }
  'data' { PT _ (TS _ 26) }
  'else' { PT _ (TS _ 27) }
  'if' { PT _ (TS _ 28) }
  'in' { PT _ (TS _ 29) }
  'let' { PT _ (TS _ 30) }
  'of' { PT _ (TS _ 31) }
  'then' { PT _ (TS _ 32) }
  '{' { PT _ (TS _ 33) }
  '|' { PT _ (TS _ 34) }
  '|>' { PT _ (TS _ 35) }
  '||' { PT _ (TS _ 36) }
  '}' { PT _ (TS _ 37) }

L_integ  { PT _ (TI $$) }
L_VIdent { PT _ (T_VIdent $$) }
L_TIdent { PT _ (T_TIdent $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
VIdent    :: { VIdent} : L_VIdent { VIdent ($1)}
TIdent    :: { TIdent} : L_TIdent { TIdent ($1)}

ListVIdent :: { [VIdent] }
ListVIdent : VIdent { (:[]) $1 } | VIdent ListVIdent { (:) $1 $2 }
Exp1 :: { Exp }
Exp1 : Exp1 '&&' Exp2 { AbsRose.EAnd $1 $3 }
     | Exp1 '||' Exp2 { AbsRose.EOr $1 $3 }
     | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '<' Exp3 { AbsRose.ELt $1 $3 }
     | Exp2 '<=' Exp3 { AbsRose.ELte $1 $3 }
     | Exp2 '>' Exp3 { AbsRose.EGt $1 $3 }
     | Exp2 '>=' Exp3 { AbsRose.EGte $1 $3 }
     | Exp2 '==' Exp3 { AbsRose.EEq $1 $3 }
     | Exp2 '!=' Exp3 { AbsRose.ENe $1 $3 }
     | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '+' Exp4 { AbsRose.EAdd $1 $3 }
     | Exp3 '-' Exp4 { AbsRose.ESub $1 $3 }
     | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '*' Exp5 { AbsRose.EMul $1 $3 }
     | Exp4 '/' Exp5 { AbsRose.EDiv $1 $3 }
     | Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 Exp6 { AbsRose.EApp $1 $2 } | Exp6 { $1 }
Exp7 :: { Exp }
Exp7 : TIdent { AbsRose.EType $1 }
     | VIdent { AbsRose.EVType $1 }
     | '[' ListExp7 ']' { AbsRose.EList $2 }
     | Integer { AbsRose.EInt $1 }
     | Exp8 { $1 }
ListExp7 :: { [Exp] }
ListExp7 : {- empty -} { [] }
         | Exp7 { (:[]) $1 }
         | Exp7 ',' ListExp7 { (:) $1 $3 }
Exp :: { Exp }
Exp : 'if' Exp 'then' Exp 'else' Exp { AbsRose.ECond $2 $4 $6 }
    | 'let' ListDecl 'in' Exp { AbsRose.ELetin $2 $4 }
    | '\\' Type VIdent '->' Exp { AbsRose.ELambda $2 $3 $5 }
    | 'case' Exp 'of' ListPatternEntry { AbsRose.ECase $2 $4 }
    | Exp1 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp8 :: { Exp }
Exp8 : '(' Exp ')' { $2 }
PatternEntry :: { PatternEntry }
PatternEntry : '|>' Pattern '=>' Exp '<|' { AbsRose.PEntry $2 $4 }
Pattern1 :: { Pattern }
Pattern1 : Pattern1 ':' Pattern2 { AbsRose.PListPattern $1 $3 }
         | Pattern2 { $1 }
Pattern2 :: { Pattern }
Pattern2 : VIdent { AbsRose.PVPattern $1 }
         | Integer { AbsRose.PInt $1 }
         | TIdent '(' ListPattern ')' { AbsRose.PAlgPattern $1 (reverse $3) }
         | '[' ListPattern1 ']' { AbsRose.PList $2 }
         | '_' { AbsRose.PAnyPattern }
         | '(' Pattern ')' { $2 }
ListPatternEntry :: { [PatternEntry] }
ListPatternEntry : PatternEntry { (:[]) $1 }
                 | PatternEntry ListPatternEntry { (:) $1 $2 }
ListPattern :: { [Pattern] }
ListPattern : {- empty -} { [] }
            | ListPattern Pattern { flip (:) $1 $2 }
ListPattern1 :: { [Pattern] }
ListPattern1 : {- empty -} { [] }
             | Pattern1 { (:[]) $1 }
             | Pattern1 ',' ListPattern1 { (:) $1 $3 }
Pattern :: { Pattern }
Pattern : Pattern1 { $1 }
Type :: { Type }
Type : Type1 '->' Type { AbsRose.TCombined $1 $3 } | Type1 { $1 }
Type1 :: { Type }
Type1 : '[' Type ']' { AbsRose.TList $2 } | Type2 { $1 }
Type2 :: { Type }
Type2 : TIdent '(' ListType ')' { AbsRose.TAlg $1 (reverse $3) }
      | Type3 { $1 }
Type3 :: { Type }
Type3 : '<' VIdent '>' { AbsRose.TVar $2 } | '(' Type ')' { $2 }
ListType :: { [Type] }
ListType : {- empty -} { [] } | ListType Type { flip (:) $1 $2 }
ListType3 :: { [Type] }
ListType3 : {- empty -} { [] }
          | Type3 { (:[]) $1 }
          | Type3 ',' ListType3 { (:) $1 $3 }
ListType2 :: { [Type] }
ListType2 : Type2 { (:[]) $1 } | Type2 '|' ListType2 { (:) $1 $3 }
Decl :: { Decl }
Decl : Pattern '=' Exp { AbsRose.DPattern $1 $3 }
     | '{' Type '}' VIdent ListVIdent '=' Exp { AbsRose.DFun $2 $4 $5 $7 }
     | 'data' TIdent '(' ListType3 ')' '=' ListType2 { AbsRose.DType $2 $4 $7 }
ListDecl :: { [Decl] }
ListDecl : Decl { (:[]) $1 } | Decl ';' ListDecl { (:) $1 $3 }
Program :: { Program }
Program : ListDecl { AbsRose.Prog $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

