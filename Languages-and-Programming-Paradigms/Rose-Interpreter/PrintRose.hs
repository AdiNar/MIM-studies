{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintRose where

-- pretty-printer generated by the BNF converter

import AbsRose
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print VIdent where
  prt _ (VIdent i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])

instance Print TIdent where
  prt _ (TIdent i) = doc (showString ( i))



instance Print Exp where
  prt i e = case e of
    EAnd exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "&&"), prt 2 exp2])
    EOr exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "||"), prt 2 exp2])
    ELt exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "<"), prt 3 exp2])
    ELte exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "<="), prt 3 exp2])
    EGt exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString ">"), prt 3 exp2])
    EGte exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString ">="), prt 3 exp2])
    EEq exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "=="), prt 3 exp2])
    ENe exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "!="), prt 3 exp2])
    EAdd exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "+"), prt 4 exp2])
    ESub exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "-"), prt 4 exp2])
    EMul exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "*"), prt 5 exp2])
    EDiv exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "/"), prt 5 exp2])
    EApp exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, prt 6 exp2])
    EType tident -> prPrec i 7 (concatD [prt 0 tident])
    EVType vident -> prPrec i 7 (concatD [prt 0 vident])
    EList exps -> prPrec i 7 (concatD [doc (showString "["), prt 7 exps, doc (showString "]")])
    EInt n -> prPrec i 7 (concatD [prt 0 n])
    ECond exp1 exp2 exp3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp1, doc (showString "then"), prt 0 exp2, doc (showString "else"), prt 0 exp3])
    ELetin decls exp -> prPrec i 0 (concatD [doc (showString "let"), prt 0 decls, doc (showString "in"), prt 0 exp])
    ELambda type_ vident exp -> prPrec i 0 (concatD [doc (showString "\\"), prt 0 type_, prt 0 vident, doc (showString "->"), prt 0 exp])
    ECase exp patternentrys -> prPrec i 0 (concatD [doc (showString "case"), prt 0 exp, doc (showString "of"), prt 0 patternentrys])
  prtList 7 [] = (concatD [])
  prtList 7 [x] = (concatD [prt 7 x])
  prtList 7 (x:xs) = (concatD [prt 7 x, doc (showString ","), prt 7 xs])
instance Print PatternEntry where
  prt i e = case e of
    PEntry pattern exp -> prPrec i 0 (concatD [doc (showString "|>"), prt 0 pattern, doc (showString "=>"), prt 0 exp, doc (showString "<|")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Pattern where
  prt i e = case e of
    PListPattern pattern1 pattern2 -> prPrec i 1 (concatD [prt 1 pattern1, doc (showString ":"), prt 2 pattern2])
    PVPattern vident -> prPrec i 2 (concatD [prt 0 vident])
    PInt n -> prPrec i 2 (concatD [prt 0 n])
    PAlgPattern tident patterns -> prPrec i 2 (concatD [prt 0 tident, doc (showString "("), prt 0 patterns, doc (showString ")")])
    PList patterns -> prPrec i 2 (concatD [doc (showString "["), prt 1 patterns, doc (showString "]")])
    PAnyPattern -> prPrec i 2 (concatD [doc (showString "_")])
  prtList 1 [] = (concatD [])
  prtList 1 [x] = (concatD [prt 1 x])
  prtList 1 (x:xs) = (concatD [prt 1 x, doc (showString ","), prt 1 xs])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Type where
  prt i e = case e of
    TCombined type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "->"), prt 0 type_2])
    TList type_ -> prPrec i 1 (concatD [doc (showString "["), prt 0 type_, doc (showString "]")])
    TAlg tident types -> prPrec i 2 (concatD [prt 0 tident, doc (showString "("), prt 0 types, doc (showString ")")])
    TVar vident -> prPrec i 3 (concatD [doc (showString "<"), prt 0 vident, doc (showString ">")])
  prtList 3 [] = (concatD [])
  prtList 3 [x] = (concatD [prt 3 x])
  prtList 3 (x:xs) = (concatD [prt 3 x, doc (showString ","), prt 3 xs])
  prtList 2 [x] = (concatD [prt 2 x])
  prtList 2 (x:xs) = (concatD [prt 2 x, doc (showString "|"), prt 2 xs])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Decl where
  prt i e = case e of
    DPattern pattern exp -> prPrec i 0 (concatD [prt 0 pattern, doc (showString "="), prt 0 exp])
    DFun type_ vident vidents exp -> prPrec i 0 (concatD [doc (showString "{"), prt 0 type_, doc (showString "}"), prt 0 vident, prt 0 vidents, doc (showString "="), prt 0 exp])
    DType tident types1 types2 -> prPrec i 0 (concatD [doc (showString "data"), prt 0 tident, doc (showString "("), prt 3 types1, doc (showString ")"), doc (showString "="), prt 2 types2])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";"), prt 0 xs])
instance Print Program where
  prt i e = case e of
    Prog decls -> prPrec i 0 (concatD [prt 0 decls])


