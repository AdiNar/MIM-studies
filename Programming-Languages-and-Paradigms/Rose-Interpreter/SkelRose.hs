module SkelRose where

-- Haskell module generated by the BNF converter

import AbsRose
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transVIdent :: VIdent -> Result
transVIdent x = case x of
  VIdent string -> failure x
transTIdent :: TIdent -> Result
transTIdent x = case x of
  TIdent string -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  ELte exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  EGte exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENe exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EApp exp1 exp2 -> failure x
  EType tident -> failure x
  EVType vident -> failure x
  EList exps -> failure x
  EInt integer -> failure x
  ECond exp1 exp2 exp3 -> failure x
  ELetin decls exp -> failure x
  ELambda type_ vident exp -> failure x
  ECase exp patternentrys -> failure x
transPatternEntry :: PatternEntry -> Result
transPatternEntry x = case x of
  PEntry pattern exp -> failure x
transPattern :: Pattern -> Result
transPattern x = case x of
  PListPattern pattern1 pattern2 -> failure x
  PVPattern vident -> failure x
  PInt integer -> failure x
  PAlgPattern tident patterns -> failure x
  PList patterns -> failure x
  PAnyPattern -> failure x
transType :: Type -> Result
transType x = case x of
  TCombined type_1 type_2 -> failure x
  TList type_ -> failure x
  TAlg tident types -> failure x
  TVar vident -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DPattern pattern exp -> failure x
  DFun type_ vident vidents exp -> failure x
  DType tident types1 types2 -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog decls -> failure x

